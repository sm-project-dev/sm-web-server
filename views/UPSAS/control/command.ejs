<!DOCTYPE html>
<html>
  <head>
    <!-- Default Js -->
    <%- include("../master/head.ejs") %>
    <script src="/js/handlebars.min.js"></script>

    <!-- SVG Map 을 생성하기 위한 필수 Library -->
    <script src="/js/svg/svg.js"></script>
    <!-- <script src="/js/svg/svg.filter.js"></script> -->
    <script src="/js/panzoom.min.js"></script>

    <!-- SVG Map을 생성하고 관리하기 위한 Core Library -->
    <script src="/js/drawSvg/drawSvg.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <!-- toggle library -->
    <script src="/js/bootstrap-toggle.min.js"></script>
    <link href="/css/bootstrap-toggle.min.css" rel="stylesheet" />

    <script src="/socket.io/socket.io.js"></script>
    <link rel="stylesheet" href="/css/bootstrap-table.min.css" />
    <script src="/js/bootstrap-table.min.js"></script>
  </head>

  <!-- 서버사이드 데이터 정의 -->
  <script>
    // 서브 카테고리 Dom
    var subCategoryDom = <%- JSON.stringify(dom.subCategoryDom) %>;

    var simpleNodes = <%- JSON.stringify(simpleNodes) %>;

    // Map 정보
    var map = <%- JSON.stringify(map) %>;
    // 제어 명령 정보
    var controlInfo = <%- JSON.stringify(controlInfo) %>;
    // 제어 장치 돔 목록([{type: 'gateValue', category: "<option value="pump"> 펌프</option>" list: ['<option value="P_001">펌프 001</option>,...']}, ...])
    var deviceDomList = <%- JSON.stringify(deviceDomList) %>;
    // 세션 ID
    var sessionID = <%- JSON.stringify(sessionID) %>;
    // 로그인 사용자 정보
    var user = <%- JSON.stringify(user) %>;
  </script>

  <body>
    <div id="wrap" class="wrap">
      <!-- Header -->
      <%- include("../master/header.ejs") %>
      <!--메인-->
      <div class="container_body">
        <div class="container_row navi">
          <div id="subCategoryDom" class="report_category"></div>
          <div class="command_status">
            <img id="updateIsApiClientConnImg" src="" />
            <div id="updateIsApiClientConnDiv"></div>
            <div id="contentTypeCategory" class="ml_2rem">
              <input
                type="button"
                name="contentTypeBtn"
                class="btn btn-danger"
                data-view="structure"
                value="구성도"
              />
              <input
                type="button"
                name="contentTypeBtn"
                class="btn btn-default"
                data-view="operStatusTable"
                value="표"
              />
            </div>
          </div>
        </div>
        <!-- 구동 모드 -->
        <div class="container_row default_search_area">
          <div class=""></div>
          <div class="search_area">
            <select class="form-control w_auto m_1rem" id="operationModeSel">
              <option selected value="DEFAULT">기본 모드</option>
            </select>
            <button id="changeOperationModeBtn" class="btn btn-success m_1rem">
              구동 모드 변경
            </button>
          </div>
        </div>
        <%- include("./addCommand.ejs") %>
        <!-- Content -->
        <div id="controlContent">
          <!-- Svg Map -->
          <div class="" id="structure">
            <div class="map_control_box" id="mapControlBox">
              <!-- panzoom button-->
              <button id="zoomIn" class="btn btn-default btn-sm">
                <span class="glyphicon glyphicon-zoom-in"></span>
              </button>
              <button id="zoomOut" class="btn btn-default btn-sm">
                <span class="glyphicon glyphicon-zoom-out"></span>
              </button>
              <button id="reset" class="btn btn-default btn-sm">
                <span class="glyphicon glyphicon-refresh"></span>
              </button>
              <button id="scrollUp" class="btn btn-default btn-sm">
                <span class="glyphicon glyphicon-arrow-up"></span>
              </button>
              <button id="monitoring_mode" class="btn btn-warning btn-sm">
                <span class="glyphicon glyphicon-fullscreen"></span>
              </button>
            </div>
            <!-- SVG canvas -->
            <div class="svg_area" id="canvas"></div>
          </div>
          <!-- Tables -->
          <div class="hidden" id="operStatusTable">
            <div class="container_row">
              <p class="table_desc_area">
                명령 목록 - 갱신시간 &nbsp;<span id="cmdUpdateDate"></span>
              </p>
              <div class="table-responsive default_area">
                <table id="cmdTableBody" class="table table-bordered number_table">
                  <thead>
                    <tr>
                      <th data-field="wrapCmdFormat">명령 형식</th>
                      <th data-field="wrapCmdType">명령 타입</th>
                      <th data-field="wrapCmdStep">명령 단계</th>
                      <th data-field="wrapCmdId">명령 ID</th>
                      <th data-field="wrapCmdName">명령 이름</th>
                      <th data-field="wrapCmdCancel">명령 취소</th>
                    </tr>
                  </thead>
                  <tbody id="cmdTableBodyDom">
                    <script id="cmdTableTemplate" type="template">
                      {{#if commandList}}
                        {{#each commandList}}
                        <tr data-index={{@index}}>
                          <td class="text-center">{{ wrapCmdFormat }}</td>
                          <td class="text-center">{{ wrapCmdType }}</td>
                          <td class="text-center">{{ wrapCmdStep }}</td>
                          <td class="text-center">{{ wrapCmdId }}</td>
                          <td class="text-center">{{ wrapCmdName }}</td>
                          <td class="text-center"><button class="btn btn-primary" name="reqCancelCmd">취소</button></td>
                        </tr>
                          {{/each}}
                          {{else}}
                        <tr>
                          <td colspan="6" class="text-center">There are no commands during execution</td>
                        </tr>
                      {{/if}}
                    </script>
                  </tbody>
                </table>
              </div>
            </div>
            <div class="container_row">
              <p class="table_desc_area">
                장치 상태 정보 목록 - 갱신시간 &nbsp;<span id="nodeUpdateDate"></span>
              </p>
              <div class="table-responsive default_area">
                <table id="nodeTableBody" class="table table-bordered number_table">
                  <thead>
                    <tr>
                      <th data-field="ntn">장치 명</th>
                      <th data-field="ni">장치 ID</th>
                      <th data-field="pnl">관련 장소</th>
                      <th data-field="d">데이터</th>
                    </tr>
                  </thead>
                  <tbody id="nodeTableBodyDom">
                    <script id="nodeTableTemplate" type="template">
                      {{#currNodeList}}
                      <tr>
                        <td class="">{{ ntn }}</td>
                        <td class="">{{ ni }}</td>
                        <td class="">{{ pnl }}</td>
                        <td class="">{{ d }}</td>
                      </tr>
                      {{/currNodeList}}
                    </script>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!--하단1-->
      <%- include("../master/footer.ejs") %>
    </div>

    <!-- Default Setting -->
    <script>
      $('#subCategoryDom').html(subCategoryDom);

      // 명령 목록을 보여줄 돔
      var $cmdTableDom;
      var $cmdUpdateDom;
      // 노드 상태를 보여줄 돔
      var $nodeTableDom;
      var $nodeUpdateDom;
      //  자동 갱신될 명령 테이블, 노드 테이블 Dom Id
      function initControlTableId(
        cmdTableDomId,
        cmdUpdateDomId,
        nodeTableDomId,
        nodeUpdateDomId,
      ) {
        $cmdTableDom = $('#' + cmdTableDomId);
        $cmdUpdateDom = $('#' + cmdUpdateDomId);
        $nodeTableDom = $('#' + nodeTableDomId);
        $nodeUpdateDom = $('#' + nodeUpdateDomId);
      }

      // 테이블 ID 정의
      initControlTableId(
        'cmdTableBody',
        'cmdUpdateDate',
        'nodeTableBody',
        'nodeUpdateDate',
      );
    </script>

    <!-- Socket.IO 이벤트 바인딩 -->
    <script>
      var socket = io();

      // 접속한 사용자 Session 정보를 Socket.io 인증용으로 전송
      socket.emit('certifySocket', {
        sessionID: sessionID,
        sessionUserInfo: user,
      });

      // 명령 요청 결과 Alert
      socket.on('resultExecCommand', function (message) {
        document.getElementById('resultExecCommand').innerText = message;
      });

      // 장치 연결 상태 반영
      var isApiClientConn = false;
      socket.on('updateIsApiClientConn', function (isConn) {
        isApiClientConn = isConn;

        var connStatusImg =
          isApiClientConn === true ? '/image/connection.png' : '/image/disconnection.png';

        document
          .getElementById('updateIsApiClientConnImg')
          .setAttribute('src', connStatusImg);
      });

      // 제어 모드 정보
      var currModeInfo = {
        algorithmId: '',
        operationConfigList: [],
      };
      /**
       * @param {Object} modeInfo
       * @param {string} modeInfo.algorithmId 알고리즘 ID
       * @param {string} modeInfo.operationConfig.algorithmName 알고리즘 Name
       * @param {string} modeInfo.operationConfig.cmdStrategy 명령 전략
       * @param {operationConfig[]} modeInfo.operationConfigList 구동 모드 가능 목록
       */
      socket.on('updateMode', function (modeInfo) {
        console.log('updateMode');
        currModeInfo = modeInfo;

        // 현재 수행 중인 알고리즘 ID 가 존재하지 않을 경우
        if (currModeInfo.algorithmId === undefined) return false;

        // 현재 수행 중인 알고리즘 정보를 가져옴
        var operConfig = _.find(currModeInfo.operationConfigList, {
          algorithmId: currModeInfo.algorithmId,
        });

        // 구동 모드 목록 중에 해당 값이 존재하지 않을 경우
        if (_.isEmpty(operConfig)) return false;

        // // 현재 수행중인 구동 모드 View
        // var operationSystemDom = document.getElementById('operationSystem');
        // // 데이터셋을 돌면서 값 세팅
        // for (const key in operationSystemDom.dataset) {
        //   if (operationSystemDom.dataset.hasOwnProperty(key)) {
        //     operationSystemDom.dataset[key] = operConfig[key];
        //   }
        // }
        // // input Value 갱신
        // operationSystemDom.innerText = operConfig.algorithmName;

        // 구동 모드 설정 목록이 없다면 종료
        if (_.isEmpty(currModeInfo.operationConfigList)) return false;

        // 변경 가능한 구동 모드 목록
        var operationModeSelDom = document.getElementById('operationModeSel');

        // 템플릿 정의
        var optionTemplate = Handlebars.compile(
          '<option {{ selected }}  value="{{ optionId }}">{{ optionValue }}</option>',
        );

        // FIXME: 동계 모드 추가
        currModeInfo.operationConfigList.push({
          algorithmId: 'winterMode',
          algorithmName: '동계 모드',
        });

        // select option 동적 생성
        var optionDomList = _.map(currModeInfo.operationConfigList, function (oConfig) {
          // 현재 수행 중인 구동 모드와 동일한 option은 selected 처리
          // console.log(oConfig, operConfig);
          var strSelected =
            oConfig.algorithmId === operConfig.algorithmId ? 'selected' : '';
          // 템플릿 적용하여 Dom 생성
          return optionTemplate({
            selected: strSelected,
            optionId: oConfig.algorithmId,
            optionValue: oConfig.algorithmName,
          });
        });
        // Select Dom 적용
        operationModeSelDom.innerHTML = optionDomList;
      });

      // 노드 상태를 저장할 목록 {ni: NodeId, ntn: Node Target Name, d: data, pnl: Place Target Name}[]
      var currNodeList = [];
      // 갱신 노드 반영
      socket.on('updateNode', function (wsNodeList) {
        //   console.log('updateNode', wsNodeList);
        var wsNodeList = _.isArray(wsNodeList) && wsNodeList.length > 0 ? wsNodeList : [];

        _.forEach(wsNodeList, function (wsNodeInfo) {
          // SVG draw map
          showNodeData(wsNodeInfo.ni, wsNodeInfo.d);
          // 현재 Node 목록 중에 갱신된 Node가 있다면 업데이트, 아니라면 신규 push
          var foundIndex = _.findIndex(currNodeList, { ni: wsNodeInfo.ni });
          foundIndex < 0
            ? currNodeList.push(wsNodeInfo)
            : (currNodeList[foundIndex] = wsNodeInfo);
        });

        // nodeList Handlebars compile
        const nodeTbodyTemplate = $('#nodeTableTemplate').html();
        const nodeTbodyBindTemplate = Handlebars.compile(nodeTbodyTemplate);
        const nodeTableBody = nodeTbodyBindTemplate({ currNodeList });

        $('#nodeTableBodyDom > tr ').empty();
        $('#nodeTableBodyDom').append(nodeTableBody);

        // 노드 정보 갱신 시각 반영
        $nodeUpdateDom.html(new Date().toLocaleString());
      });

      // 명령 관련 갱신 반영
      var currCommandList = [];
      socket.on('updateCommand', function (commandList) {
        // console.log(commandList);
        currCommandList =
          _.isArray(commandList) && commandList.length > 0 ? commandList : [];

        // cmdList Handlebars compile
        var cmdTbodyTemplate = $('#cmdTableTemplate').html();
        var cmdTbodyBindTemplate = Handlebars.compile(cmdTbodyTemplate);
        var cmdTableBody = cmdTbodyBindTemplate({ commandList });

        //  리턴받은 html을 target에 innerHTML로 세팅한다.
        $('#cmdTableBodyDom > tr ').empty();
        $('#cmdTableBodyDom').append(cmdTableBody);

        // 명령 갱신 시각 반영
        $cmdUpdateDom.html(new Date().toLocaleString());
      });

      //TODO: 명령 테이블의 row 마지막 컬럼에 취소 버튼 추가
      var columns = _.fill($cmdTableDom.find('th'), {});

      // SVG 이미지 갱신
      /**
       * @typedef {Object} wsSvgImgInfo SVG 에서 추가적으로 이미지를 보여줄 정보
       * @property {string} wrapimgId 래핑 명령 Id
       * @property {string} imgId 명령 Id
       * @property {string} imgId 보여줄 이미지 Id
       */
      var currSvgImgList = [];
      socket.on('updateSvgImg', function (newSvgImgList = []) {
        // console.log('newSvgImgList', newSvgImgList);
        // 새롭게 추가되는 이미지 목록 조회
        var appearSvgImgList = newSvgImgList.reduce(function (storage, newSvgImgInfo) {
          // 기존에 존재하는 이미지 존재 조회
          var findIndex = currSvgImgList.findIndex(function (currSvgImgInfo) {
            return currSvgImgInfo.imgId === newSvgImgInfo.imgId;
          });
          // 존재하지 않을 경우 생성 대상
          findIndex < 0 && storage.push(newSvgImgInfo);
          return storage;
        }, []);

        // console.log(appearSvgImgList);

        // 기존에 존재하던 이미지 삭제 목록 조회
        var disappearSvgImgList = currSvgImgList.reduce(function (
          storage,
          currSvgImgInfo,
        ) {
          // 기존에 존재하는 이미지 존재 조회
          var findIndex = newSvgImgList.findIndex(function (newSvgImgInfo) {
            return newSvgImgInfo.imgId === currSvgImgInfo.imgId;
          });
          // 존재하지 않을 경우 삭제 대상
          findIndex < 0 && storage.push(currSvgImgInfo);
          return storage;
        },
        []);

        // console.log(disappearSvgImgList);

        // SVG Img 재생성 요청
        appearSvgImgList.forEach(function (svgImgInfo) {
          startFlowAnimation(svgImgInfo.imgId, 1);
        });
        // SVG Img 삭제 요청
        disappearSvgImgList.forEach(function (svgImgInfo) {
          // console.log('삭제요청', startFlowAnimation);
          startFlowAnimation(svgImgInfo.imgId, 0);
        });
        // 갱신된 SVG Img 목록을 덮어씌움
        currSvgImgList = newSvgImgList;
      });

      // 서버로 명령 실행 요청
      // $('button[name="reqControlCmd"]').on('click', function(event) {
      $('#reqCommandBtn').on('click', function (event) {
        // FIXME: 동계모드 임시
        // var modeId = $('#operationModeSel option:selected').val();
        // if ('winterMode' === modeId) {
        //   return alert('동계모드에서는 제어를 할 수 없습니다.');
        // }

        var reqCmdInfo = makeControlCommand(this);

        // FIXME: 명령을 정상적으로 요청하였을 경우 요청하였다는 메시지 출력
        !_.isEmpty(reqCmdInfo) &&
          socket.emit('executeCommand', reqCmdInfo) &&
          $('#cmdGoalArea').html('');
      });

      // 서버로 명령 실행 요청한 결과 알림
      socket.on('updateAlert', function (message) {
        alert(message);
      });

      // 서버로 명령 취소 요청
      $('#cmdTableBody').on('click', 'button[name="reqCancelCmd"]', () => {
        var cmdIndex = $('button[name="reqCancelCmd"]')
          .parentsUntil('tr')
          .parent()
          .data('index');

        // console.log(
        //   $('button[name="reqCancelCmd"]')
        //     .parentsUntil('tr')
        //     .parent()
        //     .data('index'),
        // );

        socket.emit('cancelCommand', currCommandList[cmdIndex]) &&
          $('#cmdGoalArea').html('');
      });

      // FIXME: TEXT 종료 후 삭제
      $(document).ready(function () {
        var thisSelectValue = CF_SINGLE;
        // var thisSelectValue = CF_SET;
        // var thisSelectValue = CF_FLOW;
        // var thisSelectValue = CF_SCENARIO;

        // 명령 형식 변경
        $('#cmdFormatSel').val(thisSelectValue).trigger('change');
      });
    </script>

    <!-- 제어 관리 js 세팅 및 바인딩 -->
    <script>
      $('#changeOperationModeBtn').on('click', function () {
        console.log('???');
        var selectedAlgorithmId = $('#operationModeSel option:selected').val();
        // var modeName = $('#operationModeSel option:selected').text();
        // alert('운영 모드(' + modeName + ')를 변경하였습니다.');

        // 제어 모드 변경 요청
        socket.emit('changeOperationMode', selectedAlgorithmId);
      });
    </script>

    <!-- 상단 카테고리 버튼 세팅 -->
    <script>
      // 데이터 뷰 버튼 선택에 따라 보여지는 View 분기 처리
      $('input[name="contentTypeBtn"]').on('click', function () {
        var viewType = $(this).data('view');

        // 버튼 색상 변경
        $('#contentTypeCategory')
          .children('input')
          .each(function (index, inputElement) {
            var currDataView = $(inputElement).data('view');
            if (currDataView === viewType) {
              $(this).addClass('btn-danger');
              $(this).removeClass('btn-default');
            } else {
              $(this).removeClass('btn-danger');
              $(this).addClass('btn-default');
            }
          });

        // 선택한 데이터 뷰 선택 값에 따라 hidden 설정
        $('#controlContent')
          .children('div')
          .each(function (index, domElement) {
            if (domElement.id === viewType) {
              $(`#${domElement.id}`).removeClass('hidden');
            } else {
              $(`#${domElement.id}`).addClass('hidden');
            }
          });
      });
    </script>

    <!-- SVG Map 세팅 -->
    <script>
      drawSvgBasePlace('canvas'); // 멥 그리기
      bindingClickNodeEvent(socket, 'control');
    </script>

    <!-- panzoom & 맵 제어 박스 세팅 -->
    <script>
      var filter = 'win16|win32|win64|mac|macintel';
      var canvas = document.getElementById('svgCanvas');
      var startScale = 1;

      var canvasPanzoom = Panzoom(canvas, {
        cursor: 'default',
        startScale: startScale,
      });

      document.getElementById('zoomIn').addEventListener('click', canvasPanzoom.zoomIn);
      document.getElementById('zoomOut').addEventListener('click', canvasPanzoom.zoomOut);
      document.getElementById('reset').addEventListener('click', canvasPanzoom.reset);
      document.getElementById('scrollUp').addEventListener('click', () => {
        document.documentElement.scrollTop = 0;
      });
      canvas.addEventListener('wheel', canvasPanzoom.zoomWithWheel); // 마우스 휠 확대/축소 이벤트

      // 맵 제어 박스 스크롤에 반응하여 상단 고정
      $(document).ready(() => {
        const mCBoxOffset = $('#mapControlBox').offset();

        $(window).scroll(() => {
          $(document).scrollTop() > mCBoxOffset.top
            ? $('#mapControlBox').css({ position: 'fixed', top: '0px' })
            : $('#mapControlBox').css({ position: '', top: '' });
        });
      });

      // 모니터링 버튼 이벤트
      document.querySelector('#monitoring_mode').addEventListener('click', () => {
        $('.container_row').toggleClass('hidden');
        $('.container-fluid_st').toggleClass('hidden');
        $('#wrap > header').toggleClass('hidden');
        $('#wrap > footer').toggleClass('hidden');

        $('#monitoring_mode').children().toggleClass('glyphicon-fullscreen');
        $('#monitoring_mode').children().toggleClass('glyphicon-remove');

        $('.svg_area').height(window.innerHeight);
        window.dispatchEvent(new Event('resize'));
      });
    </script>

    <!-- 검색 관련 js 모음 -->
    <script src="/js/contents/report/search.js"></script>

    <!-- FIXME: VIP Mode -->
    <script src="/js/drawSvg/vipFunc.js"></script>
    <script>
      // // FIXME: VIP 모드
      if (user.user_id === 'vip') {
        vipInit();
      }
      // FIXME: 임시
      SVG.find('image').backward();
      SVG.find('.sensor').front();
      SVG.find('text').front();
    </script>
  </body>
</html>

<!-- 명령 상태, 결과 -->
<!-- <div class="container-fluid_st">
          <p class="">
            시스템 구동 모드:
            <span
              id="operationSystem"
              data-algorithm-id=""
              data-algorithm-name=""
              data-cmd-strategy=""
            ></span>
          </p>
        </div> -->
